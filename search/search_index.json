{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is Zebrunner? \u00b6 Zebrunner Overview \u00b6 Zebrunner is a test automation management tool that provides full transparency of your test results within multiple environments and platforms. To adjust Zebrunner to all your needs, we focus on its three main components: Zebrunner Engine Our cloud-based Selenium hub lets you run up to 1000 web, mobile, and API tests and reduce execution time and costs - you pay only for the period you test. We support popular platforms like Google Chrome, Firefox, Opera, Microsoft Edge, Internet Explorer, Android, iOS, and provide stability and quality of your execution. Zebrunner Insights We offer premium reporting features for your tests. See test results in real time - Zebrunner records interactive video sessions, publishes logs and screenshots. Track your pass rate, infrastructure usage, and automation team performance in one application. Zebrunner Guard Your data and users will be safe with our enterprise-grade security and centralized administration. Due to the flexible permission management, you can limit access to certain information and keep the workflow steady. What you can do with Zebrunner? \u00b6 Execute large amounts of tests in parallel and pay less - reduce regression time without loss of effective coverage and save money with our by-minute pricing. Rerun only failed tests - instead of running thousands of tests again and again, choose only failed ones and fix bugs quickly. Track test results in real time - investigate bugs, see logs and video recordings of test sessions even while your tests are being executed. Stay aware of the execution process - get immediate notifications to Slack and email after a test run is finished. Link known issues to your tests in Jira - Zebrunner automatically attaches a ticket to a failed test with the same stack trace, which dramatically reduces the time for test analyses and investigation. See detailed test analyses and team performance on configurable dashboards - use a basic set of widgets or create your own ones by choosing from multiple parameters, share test results via email or export them to HTML, and manage your automation team in one click.","title":"Overview"},{"location":"#what-is-zebrunner","text":"","title":"What is Zebrunner?"},{"location":"#zebrunner-overview","text":"Zebrunner is a test automation management tool that provides full transparency of your test results within multiple environments and platforms. To adjust Zebrunner to all your needs, we focus on its three main components: Zebrunner Engine Our cloud-based Selenium hub lets you run up to 1000 web, mobile, and API tests and reduce execution time and costs - you pay only for the period you test. We support popular platforms like Google Chrome, Firefox, Opera, Microsoft Edge, Internet Explorer, Android, iOS, and provide stability and quality of your execution. Zebrunner Insights We offer premium reporting features for your tests. See test results in real time - Zebrunner records interactive video sessions, publishes logs and screenshots. Track your pass rate, infrastructure usage, and automation team performance in one application. Zebrunner Guard Your data and users will be safe with our enterprise-grade security and centralized administration. Due to the flexible permission management, you can limit access to certain information and keep the workflow steady.","title":"Zebrunner Overview"},{"location":"#what-you-can-do-with-zebrunner","text":"Execute large amounts of tests in parallel and pay less - reduce regression time without loss of effective coverage and save money with our by-minute pricing. Rerun only failed tests - instead of running thousands of tests again and again, choose only failed ones and fix bugs quickly. Track test results in real time - investigate bugs, see logs and video recordings of test sessions even while your tests are being executed. Stay aware of the execution process - get immediate notifications to Slack and email after a test run is finished. Link known issues to your tests in Jira - Zebrunner automatically attaches a ticket to a failed test with the same stack trace, which dramatically reduces the time for test analyses and investigation. See detailed test analyses and team performance on configurable dashboards - use a basic set of widgets or create your own ones by choosing from multiple parameters, share test results via email or export them to HTML, and manage your automation team in one click.","title":"What you can do with Zebrunner?"},{"location":"components_overview/","text":"Components overview (DRAFT) \u00b6 TBD","title":"Components overview"},{"location":"components_overview/#components-overview-draft","text":"TBD","title":"Components overview (DRAFT)"},{"location":"getting_started/","text":"Getting started \u00b6 Registration \u00b6 To create a workspace in Zebrunner, press Free trial on Zebrunner and perform the following steps. Step 1. Provide company details \u00b6 Enter your email and name of your future company in Zebrunner. Press Next. Step 2. Verify email \u00b6 A verification PIN will be sent to your email. Enter it to the specified field. Press Next. Step 3. Connect GitHub account \u00b6 This step is optional. If you want to get a sample test automation project to your GitHub account, specify your organization and the name of the future sample project (you can enter only characters [a-zA-Z], digits [0-9], underscore, dash and dot (_, -, .)). Make the repository private, if needed, by putting a check below. If you skip this step, no repository will be added. You can add a repository later on the Test runs page. Press Finish. Step 4. Verification and login \u00b6 In a few minutes you will receive a verification email with details on your new workspace and a link to the generated GitHub repository - it is a sample automation project represented by a general TestNG Java automation structure and a Carina-based framework inside. In the email, press Let\u2019s start. Provide your username and enter a secure password, press Sign in , then Login. Tests vs Sessions \u00b6 You will be redirected to the starting page where you will be asked to select one of the two screen modes: Integration via agent (Tests) or Selenium Hub (Sessions). This view will be displayed by default when you open the Test runs/Test sessions page. If you skip this step, Integration via agent (Test runs view) will be enabled by default. You can easily switch between the 2 modes by using the control on the Test runs/Test sessions page. Tests: Integration via agent \u00b6 If you choose this mode, you need to integrate Zebrunner Agent into your automation framework. The agent allows to track test results in real time, apply detailed configuration and publish artifacts within one tool. This mode provides: Video recordings Session logs Known issues tracking Test artifacts This mode requires integration via the client library that you can find in our regional GitHub repositories. Sessions: Selenium Hub \u00b6 This is the easiest way to run tests in Zebrunner infrastructure. You need to generate an access token and configure your tests to use Zebrunner Selenium URL. This mode provides: Real-time test sessions tracking Video recordings Session logs For more information on Zebrunner, go to the main part of our User guide","title":"Getting started"},{"location":"getting_started/#getting-started","text":"","title":"Getting started"},{"location":"getting_started/#registration","text":"To create a workspace in Zebrunner, press Free trial on Zebrunner and perform the following steps.","title":"Registration"},{"location":"getting_started/#step-1-provide-company-details","text":"Enter your email and name of your future company in Zebrunner. Press Next.","title":"Step 1. Provide company details"},{"location":"getting_started/#step-2-verify-email","text":"A verification PIN will be sent to your email. Enter it to the specified field. Press Next.","title":"Step 2. Verify email"},{"location":"getting_started/#step-3-connect-github-account","text":"This step is optional. If you want to get a sample test automation project to your GitHub account, specify your organization and the name of the future sample project (you can enter only characters [a-zA-Z], digits [0-9], underscore, dash and dot (_, -, .)). Make the repository private, if needed, by putting a check below. If you skip this step, no repository will be added. You can add a repository later on the Test runs page. Press Finish.","title":"Step 3. Connect GitHub account"},{"location":"getting_started/#step-4-verification-and-login","text":"In a few minutes you will receive a verification email with details on your new workspace and a link to the generated GitHub repository - it is a sample automation project represented by a general TestNG Java automation structure and a Carina-based framework inside. In the email, press Let\u2019s start. Provide your username and enter a secure password, press Sign in , then Login.","title":"Step 4. Verification and login"},{"location":"getting_started/#tests-vs-sessions","text":"You will be redirected to the starting page where you will be asked to select one of the two screen modes: Integration via agent (Tests) or Selenium Hub (Sessions). This view will be displayed by default when you open the Test runs/Test sessions page. If you skip this step, Integration via agent (Test runs view) will be enabled by default. You can easily switch between the 2 modes by using the control on the Test runs/Test sessions page.","title":"Tests vs Sessions"},{"location":"getting_started/#tests-integration-via-agent","text":"If you choose this mode, you need to integrate Zebrunner Agent into your automation framework. The agent allows to track test results in real time, apply detailed configuration and publish artifacts within one tool. This mode provides: Video recordings Session logs Known issues tracking Test artifacts This mode requires integration via the client library that you can find in our regional GitHub repositories.","title":"Tests: Integration via agent"},{"location":"getting_started/#sessions-selenium-hub","text":"This is the easiest way to run tests in Zebrunner infrastructure. You need to generate an access token and configure your tests to use Zebrunner Selenium URL. This mode provides: Real-time test sessions tracking Video recordings Session logs For more information on Zebrunner, go to the main part of our User guide","title":"Sessions: Selenium Hub"},{"location":"registration/","text":"Registration \u00b6 Getting started \u00b6 To create a workspace in Zebrunner, press Free trial on Zebrunner and perform the following steps. Step 1. Provide company details \u00b6 Enter your email and name of your future company in Zebrunner. Press Next. Step 2. Verify email \u00b6 A verification PIN will be sent to your email. Enter it to the specified field. Press Next. Step 3. Connect GitHub account \u00b6 This step is optional. If you want to get a sample test automation project to your GitHub account, specify your organization and the name of the future sample project (you can enter only characters [a-zA-Z], digits [0-9], underscore, dash and dot (_, -, .)). Make the repository private, if needed by putting a check below. If you skip this step, no repository will be added. You can add a repository later on the Test runs page. Press Finish. Step 4. Verification and login \u00b6 In a few minutes you will receive a verification email with details on your new workspace and a link to the generated GitHub repository - it is a sample automation project represented by a general TestNG Java automation structure and a Carina-based framework inside. In the email, press Let\u2019s start. Provide your username and enter a secure password, press Sign in , then Login. Tests vs Sessions \u00b6 You will be redirected to the starting page where you will be asked to select one of the two screen modes: Integration via agent (Tests) or Selenium Hub (Sessions). This view will be displayed by default when you open the Test runs/Test sessions page. If you skip this step, Integration via agent (Test runs view) will be enabled by default. You can easily switch between the 2 modes by using the control on the Test runs/Test sessions page. Tests: Integration via agent \u00b6 If you choose this mode, you need to integrate Zebrunner Agent into your automation framework. The agent allows to track test results in real time, apply detailed configuration and publish artifacts within one tool. This mode provides: Video recordings Session logs Known issues tracking Test artifacts This mode requires integration via the client library that you can find in our regional GitHub repositories. Sessions: Selenium Hub \u00b6 This is the easiest way to run tests in Zebrunner infrastructure. You need to generate an access token and configure your tests to use Zebrunner Selenium URL. This mode provides: Real-time test sessions tracking Video recordings Session logs For more information on Zebrunner, go to the main part of our User guide","title":"Registration"},{"location":"registration/#registration","text":"","title":"Registration"},{"location":"registration/#getting-started","text":"To create a workspace in Zebrunner, press Free trial on Zebrunner and perform the following steps.","title":"Getting started"},{"location":"registration/#step-1-provide-company-details","text":"Enter your email and name of your future company in Zebrunner. Press Next.","title":"Step 1. Provide company details"},{"location":"registration/#step-2-verify-email","text":"A verification PIN will be sent to your email. Enter it to the specified field. Press Next.","title":"Step 2. Verify email"},{"location":"registration/#step-3-connect-github-account","text":"This step is optional. If you want to get a sample test automation project to your GitHub account, specify your organization and the name of the future sample project (you can enter only characters [a-zA-Z], digits [0-9], underscore, dash and dot (_, -, .)). Make the repository private, if needed by putting a check below. If you skip this step, no repository will be added. You can add a repository later on the Test runs page. Press Finish.","title":"Step 3. Connect GitHub account"},{"location":"registration/#step-4-verification-and-login","text":"In a few minutes you will receive a verification email with details on your new workspace and a link to the generated GitHub repository - it is a sample automation project represented by a general TestNG Java automation structure and a Carina-based framework inside. In the email, press Let\u2019s start. Provide your username and enter a secure password, press Sign in , then Login.","title":"Step 4. Verification and login"},{"location":"registration/#tests-vs-sessions","text":"You will be redirected to the starting page where you will be asked to select one of the two screen modes: Integration via agent (Tests) or Selenium Hub (Sessions). This view will be displayed by default when you open the Test runs/Test sessions page. If you skip this step, Integration via agent (Test runs view) will be enabled by default. You can easily switch between the 2 modes by using the control on the Test runs/Test sessions page.","title":"Tests vs Sessions"},{"location":"registration/#tests-integration-via-agent","text":"If you choose this mode, you need to integrate Zebrunner Agent into your automation framework. The agent allows to track test results in real time, apply detailed configuration and publish artifacts within one tool. This mode provides: Video recordings Session logs Known issues tracking Test artifacts This mode requires integration via the client library that you can find in our regional GitHub repositories.","title":"Tests: Integration via agent"},{"location":"registration/#sessions-selenium-hub","text":"This is the easiest way to run tests in Zebrunner infrastructure. You need to generate an access token and configure your tests to use Zebrunner Selenium URL. This mode provides: Real-time test sessions tracking Video recordings Session logs For more information on Zebrunner, go to the main part of our User guide","title":"Sessions: Selenium Hub"},{"location":"agents/java/advanced/","text":"Advanced reporting \u00b6 Logger \u00b6 It is also possible to enable log collection for your tests. Currently three logging frameworks are supported out of the box: logback, log4j, log4j2. In order to enable logging all you have to do is register reporting appender in your test framework configuration file. Logback Add dependency: <dependency> <groupId> ch.qos.logback </groupId> <artifactId> logback-classic </artifactId> <version> 1.2.3 </version> </dependency> Add logback.xml to resources folder: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <configuration> <appender name= \"ReportingAppender\" class= \"com.zebrunner.agent.core.appender.logback.ReportingAppender\" > <encoder> <pattern> %d{HH:mm:ss.SSS} [%t] %-5level - %msg%n </pattern> </encoder> </appender> <root level= \"info\" > <appender-ref ref= \"ReportingAppender\" /> </root> </configuration> Sample logger usage: import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; public class AwesomeTests { private static final Logger LOGGER = LoggerFactory . getLogger ( AwesomeTests . class ); @Test public void awesomeTest () { LOGGER . info ( \"Test info\" ); } } Log4j Add dependency: <dependency> <groupId> log4j </groupId> <artifactId> log4j </artifactId> <version> 1.2.17 </version> </dependency> Add log4j.properties to resources folder: log4j.rootLogger = INFO, zebrunner log4j.appender.zebrunner = com.zebrunner.agent.core.appender.log4j.ReportingAppender log4j.appender.zebrunner.layout = org.apache.log4j.PatternLayout log4j.appender.zebrunner.layout.conversionPattern = pattern\">[%d{HH:mm:ss}] %-5p (%F:%L) - %m%n Sample logger usage: import org.apache.log4j.Logger ; public class AwesomeTests { private Logger LOGGER = Logger . getLogger ( AwesomeTests . class ); @Test public void awesomeTest () { LOGGER . info ( \"Test info\" ); } } Log4j2 Add dependency: <dependency> <groupId> org.apache.logging.log4j </groupId> <artifactId> log4j-api </artifactId> <version> 2.13.3 </version> </dependency> <dependency> <groupId> org.apache.logging.log4j </groupId> <artifactId> log4j-core </artifactId> <version> 2.13.3 </version> </dependency> Add log4j2.xml to resources folder: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <configuration packages= \"com.zebrunner.agent.core.appender.log4j2\" > <properties> <property name= \"pattern\" > [%d{HH:mm:ss}] %-5p (%F:%L) - %m%n </property> </properties> <appenders> <ReportingAppender name= \"ReportingAppender\" > <PatternLayout pattern= \"${pattern}\" /> </ReportingAppender> </appenders> <loggers> <root level= \"info\" > <appender-ref ref= \"ReportingAppender\" /> </root> </loggers> </configuration> Sample logger usage: import org.apache.logging.log4j.LogManager ; import org.apache.logging.log4j.Logger ; public class AwesomeTests { private Logger LOGGER = LogManager . getLogger ( AwesomeTests . class );; @Test public void awesomeTest () { LOGGER . info ( \"Test info\" ); } } Screenshots \u00b6 In case you are using TestNG as a UI testing framework it might come handy to have an ability to track captured screenshots in scope of Zebrunner reporting. Agent comes with a Java API allowing you to send your screenshots to Zebrunner so they will be attached to test run. Below is a sample code of test sending screenshot to Zebrunner: import com.zebrunner.agent.core.registrar.Screenshot ; import org.testng.annotations.Test ; public class AwesomeTests { @Test public void myAwesomeTest () { // capture screenshot Screenshot . upload ( screenshotBytes , capturedAtMillis ); // meaningful assertions } } Screenshot should be passed as byte array along with unix timestamp in milliseconds corresponding to the moment when screenshot was captured. If null is supplied instead of timestamp - it will be generated automatically, however it is strongly recommended to include accurate timestamp in order to get accurate tracking. Ownership \u00b6 You might want to add transparency to the process of automation maintenance by having an engineer responsible for evolution of specific tests or test classes. Zebrunner comes with a concept of maintainer - a person that can be assigned to maintain tests. In order to keep track of those agent comes with @Maintainer annotation. Test classes and methods can be annotated. It is also possible to override class-level maintainer on a mehtod-level. See a sample test class below: import com.zebrunner.agent.core.reporting.Maintainer ; import org.testng.annotations.Test ; @Maintainer ( \"kenobi\" ) public class AwesomeTests { @Test @Maintainer ( \"skywalker\" ) public void awesomeTest () { // meaningful assertions } @Test public void anotherAwesomeTest () { // meaningful assertions } } In the example above kenobi will be reported as a maintaner of anotherAwesomeTest (class-level value taken into account), while skywalker will be reported as a mainainer of test awesomeTest . Maintainer username should be valid Zebrunner username, otherwise it will be set to anonymous.","title":"Advanced reporting"},{"location":"agents/java/advanced/#advanced-reporting","text":"","title":"Advanced reporting"},{"location":"agents/java/advanced/#logger","text":"It is also possible to enable log collection for your tests. Currently three logging frameworks are supported out of the box: logback, log4j, log4j2. In order to enable logging all you have to do is register reporting appender in your test framework configuration file. Logback Add dependency: <dependency> <groupId> ch.qos.logback </groupId> <artifactId> logback-classic </artifactId> <version> 1.2.3 </version> </dependency> Add logback.xml to resources folder: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <configuration> <appender name= \"ReportingAppender\" class= \"com.zebrunner.agent.core.appender.logback.ReportingAppender\" > <encoder> <pattern> %d{HH:mm:ss.SSS} [%t] %-5level - %msg%n </pattern> </encoder> </appender> <root level= \"info\" > <appender-ref ref= \"ReportingAppender\" /> </root> </configuration> Sample logger usage: import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; public class AwesomeTests { private static final Logger LOGGER = LoggerFactory . getLogger ( AwesomeTests . class ); @Test public void awesomeTest () { LOGGER . info ( \"Test info\" ); } } Log4j Add dependency: <dependency> <groupId> log4j </groupId> <artifactId> log4j </artifactId> <version> 1.2.17 </version> </dependency> Add log4j.properties to resources folder: log4j.rootLogger = INFO, zebrunner log4j.appender.zebrunner = com.zebrunner.agent.core.appender.log4j.ReportingAppender log4j.appender.zebrunner.layout = org.apache.log4j.PatternLayout log4j.appender.zebrunner.layout.conversionPattern = pattern\">[%d{HH:mm:ss}] %-5p (%F:%L) - %m%n Sample logger usage: import org.apache.log4j.Logger ; public class AwesomeTests { private Logger LOGGER = Logger . getLogger ( AwesomeTests . class ); @Test public void awesomeTest () { LOGGER . info ( \"Test info\" ); } } Log4j2 Add dependency: <dependency> <groupId> org.apache.logging.log4j </groupId> <artifactId> log4j-api </artifactId> <version> 2.13.3 </version> </dependency> <dependency> <groupId> org.apache.logging.log4j </groupId> <artifactId> log4j-core </artifactId> <version> 2.13.3 </version> </dependency> Add log4j2.xml to resources folder: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <configuration packages= \"com.zebrunner.agent.core.appender.log4j2\" > <properties> <property name= \"pattern\" > [%d{HH:mm:ss}] %-5p (%F:%L) - %m%n </property> </properties> <appenders> <ReportingAppender name= \"ReportingAppender\" > <PatternLayout pattern= \"${pattern}\" /> </ReportingAppender> </appenders> <loggers> <root level= \"info\" > <appender-ref ref= \"ReportingAppender\" /> </root> </loggers> </configuration> Sample logger usage: import org.apache.logging.log4j.LogManager ; import org.apache.logging.log4j.Logger ; public class AwesomeTests { private Logger LOGGER = LogManager . getLogger ( AwesomeTests . class );; @Test public void awesomeTest () { LOGGER . info ( \"Test info\" ); } }","title":"Logger"},{"location":"agents/java/advanced/#screenshots","text":"In case you are using TestNG as a UI testing framework it might come handy to have an ability to track captured screenshots in scope of Zebrunner reporting. Agent comes with a Java API allowing you to send your screenshots to Zebrunner so they will be attached to test run. Below is a sample code of test sending screenshot to Zebrunner: import com.zebrunner.agent.core.registrar.Screenshot ; import org.testng.annotations.Test ; public class AwesomeTests { @Test public void myAwesomeTest () { // capture screenshot Screenshot . upload ( screenshotBytes , capturedAtMillis ); // meaningful assertions } } Screenshot should be passed as byte array along with unix timestamp in milliseconds corresponding to the moment when screenshot was captured. If null is supplied instead of timestamp - it will be generated automatically, however it is strongly recommended to include accurate timestamp in order to get accurate tracking.","title":"Screenshots"},{"location":"agents/java/advanced/#ownership","text":"You might want to add transparency to the process of automation maintenance by having an engineer responsible for evolution of specific tests or test classes. Zebrunner comes with a concept of maintainer - a person that can be assigned to maintain tests. In order to keep track of those agent comes with @Maintainer annotation. Test classes and methods can be annotated. It is also possible to override class-level maintainer on a mehtod-level. See a sample test class below: import com.zebrunner.agent.core.reporting.Maintainer ; import org.testng.annotations.Test ; @Maintainer ( \"kenobi\" ) public class AwesomeTests { @Test @Maintainer ( \"skywalker\" ) public void awesomeTest () { // meaningful assertions } @Test public void anotherAwesomeTest () { // meaningful assertions } } In the example above kenobi will be reported as a maintaner of anotherAwesomeTest (class-level value taken into account), while skywalker will be reported as a mainainer of test awesomeTest . Maintainer username should be valid Zebrunner username, otherwise it will be set to anonymous.","title":"Ownership"},{"location":"agents/java/junit/","text":"JUnit agent \u00b6 Agent support JUnit version up to 4.13 Official Zebrunner TestNG agent providing reporting and smart reruns functionality. In order to enable Zebrunner Listener for TestNG no special configuration is required - service discovery mechanism will automatically register listener once it will be availlable on your test application classpath. Step1: Add project dependency \u00b6 Agent comes bundled with JUnit 4.13, so you may want to comment our your dependency or exclude it from agent. Maven <dependency> <groupId> com.zebrunner </groupId> <artifactId> agent-junit </artifactId> <version> 1.0.0 </version> </dependency> Gradle dependencies { testImplementation 'com.zebrunner:agent-junit:1.0.0' } test.doFirst { jvmArgs \"-javaagent:${classpath.find { it.name == 'agent-junit-1.0-SNAPSHOT.jar' }.absolutePath}\" } Step 2: Configure agent \u00b6 There are multiple ways to provide agent configuration: Environment variables Program arguments YAML file Properties file Configuration lookup will be performed in order listed above, meaning that environment configuration will always take precedence over YAML and so on. It is also possible to override configuration parameters by supplying them via configuration provider having higher precedence. Once configuration is in place agent is ready to track you test run events, no additional configuration required. Environment variables REPORTING_ENABLED = true REPORTING_SERVER_HOSTNAME = localhost:8080 REPORTING_SERVER_ACCESS_TOKEN-token = <token> Program arguments -Dreporting.enabled = true -Dreporting.server.hostname = localhost:8080 -Dreporting.server.access-token = <token> agent.yaml reporting : enabled : true server : hostname : localhost:8080/api access-token : <token> agent.properties reporting.enabled = true reporting.server.hostname = localhost:8080 reporting.server.access-token = <token> Access token and hostname are available in User profile . Configuration files agent.yaml or agent.properties should be placed into project resource folder. Step 3: Advanced reporting \u00b6 Read the following docs to enabled advanced reporting features: Configure loggers Capture screenshots Track test ownership","title":"JUnit agent"},{"location":"agents/java/junit/#junit-agent","text":"Agent support JUnit version up to 4.13 Official Zebrunner TestNG agent providing reporting and smart reruns functionality. In order to enable Zebrunner Listener for TestNG no special configuration is required - service discovery mechanism will automatically register listener once it will be availlable on your test application classpath.","title":"JUnit agent"},{"location":"agents/java/junit/#step1-add-project-dependency","text":"Agent comes bundled with JUnit 4.13, so you may want to comment our your dependency or exclude it from agent. Maven <dependency> <groupId> com.zebrunner </groupId> <artifactId> agent-junit </artifactId> <version> 1.0.0 </version> </dependency> Gradle dependencies { testImplementation 'com.zebrunner:agent-junit:1.0.0' } test.doFirst { jvmArgs \"-javaagent:${classpath.find { it.name == 'agent-junit-1.0-SNAPSHOT.jar' }.absolutePath}\" }","title":"Step1: Add project dependency"},{"location":"agents/java/junit/#step-2-configure-agent","text":"There are multiple ways to provide agent configuration: Environment variables Program arguments YAML file Properties file Configuration lookup will be performed in order listed above, meaning that environment configuration will always take precedence over YAML and so on. It is also possible to override configuration parameters by supplying them via configuration provider having higher precedence. Once configuration is in place agent is ready to track you test run events, no additional configuration required. Environment variables REPORTING_ENABLED = true REPORTING_SERVER_HOSTNAME = localhost:8080 REPORTING_SERVER_ACCESS_TOKEN-token = <token> Program arguments -Dreporting.enabled = true -Dreporting.server.hostname = localhost:8080 -Dreporting.server.access-token = <token> agent.yaml reporting : enabled : true server : hostname : localhost:8080/api access-token : <token> agent.properties reporting.enabled = true reporting.server.hostname = localhost:8080 reporting.server.access-token = <token> Access token and hostname are available in User profile . Configuration files agent.yaml or agent.properties should be placed into project resource folder.","title":"Step 2: Configure agent"},{"location":"agents/java/junit/#step-3-advanced-reporting","text":"Read the following docs to enabled advanced reporting features: Configure loggers Capture screenshots Track test ownership","title":"Step 3: Advanced reporting"},{"location":"agents/java/junit5/","text":"JUnit5 agent \u00b6 Agent supports JUnit version starting from 5.0.0 Official Zebrunner TestNG agent providing reporting and smart reruns functionality. In order to enable Zebrunner Listener for TestNG no special configuration is required - service discovery mechanism will automatically register listener once it will be availlable on your test application classpath. Step1: Add project dependency \u00b6 Agent comes bundled with JUnit 5.6.1, so you may want to comment our your dependency or exclude it from agent. Maven <dependency> <groupId> com.zebrunner </groupId> <artifactId> agent-junit5 </artifactId> <version> 1.0.0 </version> </dependency> Gradle dependencies { testImplementation 'com.zebrunner:agent-junit5:1.0.0' } test.doFirst { jvmArgs \"-javaagent:${classpath.find { it.name == 'agent-junit5-1.0-SNAPSHOT.jar' }.absolutePath}\" } Step 2: Configure agent \u00b6 There are multiple ways to provide agent configuration: Environment variables Program arguments YAML file Properties file Configuration lookup will be performed in order listed above, meaning that environment configuration will always take precedence over YAML and so on. It is also possible to override configuration parameters by supplying them via configuration provider having higher precedence. Once configuration is in place agent is ready to track you test run events, no additional configuration required. Environment variables REPORTING_ENABLED = true REPORTING_SERVER_HOSTNAME = localhost:8080 REPORTING_SERVER_ACCESS_TOKEN-token = <token> Program arguments -Dreporting.enabled = true -Dreporting.server.hostname = localhost:8080 -Dreporting.server.access-token = <token> agent.yaml reporting : enabled : true server : hostname : localhost:8080/api access-token : <token> agent.properties reporting.enabled = true reporting.server.hostname = localhost:8080 reporting.server.access-token = <token> Access token and hostname are available in User profile . Configuration files agent.yaml or agent.properties should be placed into project resource folder. Step 3: Advanced reporting \u00b6 Read the following docs to enabled advanced reporting features: Configure loggers Capture screenshots Track test ownership","title":"JUnit5 agent"},{"location":"agents/java/junit5/#junit5-agent","text":"Agent supports JUnit version starting from 5.0.0 Official Zebrunner TestNG agent providing reporting and smart reruns functionality. In order to enable Zebrunner Listener for TestNG no special configuration is required - service discovery mechanism will automatically register listener once it will be availlable on your test application classpath.","title":"JUnit5 agent"},{"location":"agents/java/junit5/#step1-add-project-dependency","text":"Agent comes bundled with JUnit 5.6.1, so you may want to comment our your dependency or exclude it from agent. Maven <dependency> <groupId> com.zebrunner </groupId> <artifactId> agent-junit5 </artifactId> <version> 1.0.0 </version> </dependency> Gradle dependencies { testImplementation 'com.zebrunner:agent-junit5:1.0.0' } test.doFirst { jvmArgs \"-javaagent:${classpath.find { it.name == 'agent-junit5-1.0-SNAPSHOT.jar' }.absolutePath}\" }","title":"Step1: Add project dependency"},{"location":"agents/java/junit5/#step-2-configure-agent","text":"There are multiple ways to provide agent configuration: Environment variables Program arguments YAML file Properties file Configuration lookup will be performed in order listed above, meaning that environment configuration will always take precedence over YAML and so on. It is also possible to override configuration parameters by supplying them via configuration provider having higher precedence. Once configuration is in place agent is ready to track you test run events, no additional configuration required. Environment variables REPORTING_ENABLED = true REPORTING_SERVER_HOSTNAME = localhost:8080 REPORTING_SERVER_ACCESS_TOKEN-token = <token> Program arguments -Dreporting.enabled = true -Dreporting.server.hostname = localhost:8080 -Dreporting.server.access-token = <token> agent.yaml reporting : enabled : true server : hostname : localhost:8080/api access-token : <token> agent.properties reporting.enabled = true reporting.server.hostname = localhost:8080 reporting.server.access-token = <token> Access token and hostname are available in User profile . Configuration files agent.yaml or agent.properties should be placed into project resource folder.","title":"Step 2: Configure agent"},{"location":"agents/java/junit5/#step-3-advanced-reporting","text":"Read the following docs to enabled advanced reporting features: Configure loggers Capture screenshots Track test ownership","title":"Step 3: Advanced reporting"},{"location":"agents/java/testng/","text":"TestNG agent \u00b6 Agent supports TestNG version starting from 7.0.0 Official Zebrunner TestNG agent providing reporting and smart reruns functionality. In order to enable Zebrunner Listener for TestNG no special configuration is required - service discovery mechanism will automatically register listener once it will be availlable on your test application classpath. Step1: Add project dependency \u00b6 Agent comes bundled with TestNG 7.1.0, so you may want to comment our your dependency or exclude it from agent. Maven <dependency> <groupId> com.zebrunner </groupId> <artifactId> agent-testng </artifactId> <version> 1.0.0 </version> </dependency> Gradle dependencies { testImplementation 'com.zebrunner:agent-testng:1.0.0' } Step 2: Configure agent \u00b6 There are multiple ways to provide agent configuration: Environment variables Program arguments YAML file Properties file Configuration lookup will be performed in order listed above, meaning that environment configuration will always take precedence over YAML and so on. It is also possible to override configuration parameters by supplying them via configuration provider having higher precedence. Once configuration is in place agent is ready to track you test run events, no additional configuration required. Environment variables REPORTING_ENABLED = true REPORTING_SERVER_HOSTNAME = localhost:8080 REPORTING_SERVER_ACCESS_TOKEN-token = <token> Program arguments -Dreporting.enabled = true -Dreporting.server.hostname = localhost:8080 -Dreporting.server.access-token = <token> agent.yaml reporting : enabled : true server : hostname : localhost:8080/api access-token : <token> agent.properties reporting.enabled = true reporting.server.hostname = localhost:8080 reporting.server.access-token = <token> Access token and hostname are available in User profile . Configuration files agent.yaml or agent.properties should be placed into project resource folder. Step 3: Advanced reporting \u00b6 Read the following docs to enabled advanced reporting features: Configure loggers Capture screenshots Track test ownership","title":"TestNG agent"},{"location":"agents/java/testng/#testng-agent","text":"Agent supports TestNG version starting from 7.0.0 Official Zebrunner TestNG agent providing reporting and smart reruns functionality. In order to enable Zebrunner Listener for TestNG no special configuration is required - service discovery mechanism will automatically register listener once it will be availlable on your test application classpath.","title":"TestNG agent"},{"location":"agents/java/testng/#step1-add-project-dependency","text":"Agent comes bundled with TestNG 7.1.0, so you may want to comment our your dependency or exclude it from agent. Maven <dependency> <groupId> com.zebrunner </groupId> <artifactId> agent-testng </artifactId> <version> 1.0.0 </version> </dependency> Gradle dependencies { testImplementation 'com.zebrunner:agent-testng:1.0.0' }","title":"Step1: Add project dependency"},{"location":"agents/java/testng/#step-2-configure-agent","text":"There are multiple ways to provide agent configuration: Environment variables Program arguments YAML file Properties file Configuration lookup will be performed in order listed above, meaning that environment configuration will always take precedence over YAML and so on. It is also possible to override configuration parameters by supplying them via configuration provider having higher precedence. Once configuration is in place agent is ready to track you test run events, no additional configuration required. Environment variables REPORTING_ENABLED = true REPORTING_SERVER_HOSTNAME = localhost:8080 REPORTING_SERVER_ACCESS_TOKEN-token = <token> Program arguments -Dreporting.enabled = true -Dreporting.server.hostname = localhost:8080 -Dreporting.server.access-token = <token> agent.yaml reporting : enabled : true server : hostname : localhost:8080/api access-token : <token> agent.properties reporting.enabled = true reporting.server.hostname = localhost:8080 reporting.server.access-token = <token> Access token and hostname are available in User profile . Configuration files agent.yaml or agent.properties should be placed into project resource folder.","title":"Step 2: Configure agent"},{"location":"agents/java/testng/#step-3-advanced-reporting","text":"Read the following docs to enabled advanced reporting features: Configure loggers Capture screenshots Track test ownership","title":"Step 3: Advanced reporting"},{"location":"agents/javascript/jasmine/","text":"TBD \u00b6","title":"Jasmine"},{"location":"agents/javascript/jasmine/#tbd","text":"","title":"TBD"},{"location":"agents/javascript/jest/","text":"TBD \u00b6","title":"Jest"},{"location":"agents/javascript/jest/#tbd","text":"","title":"TBD"},{"location":"agents/python/pytest/","text":"TBD \u00b6","title":"Pytest"},{"location":"agents/python/pytest/#tbd","text":"","title":"TBD"},{"location":"agents/ruby/rspec/","text":"TBD \u00b6","title":"Rspec"},{"location":"agents/ruby/rspec/#tbd","text":"","title":"TBD"},{"location":"guide/dashboards/","text":"Dashboards \u00b6 Dashboard in Zebrunner is a special page that displays widgets with main analytical info on your test results. A system General dashboard is displayed when you open Zebrunner (or press in the upper-left corner of the window). General is not editable \u2013 you cannot change its name, make it hidden, delete it or add widgets. In addition to General, you can create other dashboards to systemize widgets according to your needs. What can you do with dashboards? Create Dashboards Edit Dashboards Make Dashboards Hidden Delete Dashboards Send Dashboards via email Search for Dashboards by name Change order of dashboards Create dashboard \u00b6 To create a new dashboard, perform the following steps: Navigate to the side menu and click the \u201cDashboards\u201d icon . Then press the \u201c+Add dashboard\" button. The \u201cNew Dashboard\u201d popup will appear. Enter a name of a new dashboard. Click \"Create\" . Now you can add widgets to the new dashboard. Edit dashboard \u00b6 To edit a dashboard, perform the following steps: Navigate to the side menu and click the \u201cDashboards\u201d icon . Choose the necessary dashboard. Click in the upper-right corner of the window. The \u201cEdit Dashboard\u201d popup will appear. Make the necessary changes to the dashboard (except for General): edit the name of the dashboard; make the dashboard visible or hidden by clicking the \u201cHidden\u201d switch (only if you have the \u201cView hidden dashboards\u201d permission)(read more here ). Click \u201cSave\u201d . The dashboard will be displayed with updates. Optional: If you have \u201cModify widgets\u201d and \u201cModify dashboards\u201d permissions, you can edit a dashboard by applying a certain parameter to all the widgets on a dashboard (instead of setting it for each widget manually). For example, you want to see your test results on a dashboard for the API platform only. For this, perform the following steps: After the \u201cEdit Dashboard\u201d popup appears, enter the parameter \u201cPLATFORM\u201d (in uppercase) to the \u201cKey\u201d field and \u201capi\u201d (in lowercase) to the \u201cValue\u201d field. Click \u201cAdd\u201d and \u201cSave\u201d . Refresh the page. The dashboard will be displayed with updates. Note: You can apply several parameters (keys) to a dashboard. But you can add only 1 value to a parameter. Hidden dashboards \u00b6 Dashboards in Zebrunner can be visible or hidden. Hidden dashboards are useful when: You need to test and adjust experimental widgets to a dashboard; You want to track your automation team performance on a special dashboard; You\u2019d like to hide a dashboard from other users. Note: You need the \u201cView hidden dashboards\u201d permission to make a dashboard hidden. Otherwise, you will not see this option. To make a dashboard hidden, open \u201cNew dashboard\u201d or \u201cEdit dashboard\u201d popup and turn on the switch \u201cHidden\u201d . Delete dashboard \u00b6 To delete a dashboard, perform the following steps: Navigate to the side menu and click the \u201cDashboards\u201d icon . Choose the necessary dashboard. Click in the upper-right corner of the window. The \u201cEdit Dashboard\u201d popup will appear. Press \u201cDelete\u201d. Submit the action. The dashboard and attached widgets will be removed. Note: You cannot delete the General dashboard. Send dashboard via email \u00b6 To send a dashboard via email, perform the following steps: Navigate to the side menu and click the \u201cDashboards\u201d icon . Choose the necessary dashboard. Click in the upper-right corner of the window. The \u201cEmail\u201d popup will appear. The \u201cName\u201d and \u201cText\u201d fields are filled by default, still you can change them. Fill in the \u201cRecipients\u201d field (unlimited number of emails per time). Press the \u201cSend\u201d button. A popup message \u201cEmail was successfully sent\u201d will appear in the lower-right corner of the window. Search for dashboard \u00b6 To search for a dashboard, perform the following steps: Navigate to the side menu and click the \u201cDashboards\u201d icon . Go to the \u201cSearch\u201d field and enter the name/part of the name of a dashboard. Choose the necessary dashboard. Change the order of dashboards \u00b6 To change the order of dashboards, perform the following steps: Navigate to the side menu and click the \u201cDashboards\u201d icon . Grab a dashboard with a hand cursor by clicking . Drag and drop the chosen dashboard to the necessary place. Dashboards will be displayed in a new order.","title":"Dashboards"},{"location":"guide/dashboards/#dashboards","text":"Dashboard in Zebrunner is a special page that displays widgets with main analytical info on your test results. A system General dashboard is displayed when you open Zebrunner (or press in the upper-left corner of the window). General is not editable \u2013 you cannot change its name, make it hidden, delete it or add widgets. In addition to General, you can create other dashboards to systemize widgets according to your needs. What can you do with dashboards? Create Dashboards Edit Dashboards Make Dashboards Hidden Delete Dashboards Send Dashboards via email Search for Dashboards by name Change order of dashboards","title":"Dashboards"},{"location":"guide/dashboards/#create-dashboard","text":"To create a new dashboard, perform the following steps: Navigate to the side menu and click the \u201cDashboards\u201d icon . Then press the \u201c+Add dashboard\" button. The \u201cNew Dashboard\u201d popup will appear. Enter a name of a new dashboard. Click \"Create\" . Now you can add widgets to the new dashboard.","title":"Create dashboard"},{"location":"guide/dashboards/#edit-dashboard","text":"To edit a dashboard, perform the following steps: Navigate to the side menu and click the \u201cDashboards\u201d icon . Choose the necessary dashboard. Click in the upper-right corner of the window. The \u201cEdit Dashboard\u201d popup will appear. Make the necessary changes to the dashboard (except for General): edit the name of the dashboard; make the dashboard visible or hidden by clicking the \u201cHidden\u201d switch (only if you have the \u201cView hidden dashboards\u201d permission)(read more here ). Click \u201cSave\u201d . The dashboard will be displayed with updates. Optional: If you have \u201cModify widgets\u201d and \u201cModify dashboards\u201d permissions, you can edit a dashboard by applying a certain parameter to all the widgets on a dashboard (instead of setting it for each widget manually). For example, you want to see your test results on a dashboard for the API platform only. For this, perform the following steps: After the \u201cEdit Dashboard\u201d popup appears, enter the parameter \u201cPLATFORM\u201d (in uppercase) to the \u201cKey\u201d field and \u201capi\u201d (in lowercase) to the \u201cValue\u201d field. Click \u201cAdd\u201d and \u201cSave\u201d . Refresh the page. The dashboard will be displayed with updates. Note: You can apply several parameters (keys) to a dashboard. But you can add only 1 value to a parameter.","title":"Edit dashboard"},{"location":"guide/dashboards/#hidden-dashboards","text":"Dashboards in Zebrunner can be visible or hidden. Hidden dashboards are useful when: You need to test and adjust experimental widgets to a dashboard; You want to track your automation team performance on a special dashboard; You\u2019d like to hide a dashboard from other users. Note: You need the \u201cView hidden dashboards\u201d permission to make a dashboard hidden. Otherwise, you will not see this option. To make a dashboard hidden, open \u201cNew dashboard\u201d or \u201cEdit dashboard\u201d popup and turn on the switch \u201cHidden\u201d .","title":"Hidden dashboards"},{"location":"guide/dashboards/#delete-dashboard","text":"To delete a dashboard, perform the following steps: Navigate to the side menu and click the \u201cDashboards\u201d icon . Choose the necessary dashboard. Click in the upper-right corner of the window. The \u201cEdit Dashboard\u201d popup will appear. Press \u201cDelete\u201d. Submit the action. The dashboard and attached widgets will be removed. Note: You cannot delete the General dashboard.","title":"Delete dashboard"},{"location":"guide/dashboards/#send-dashboard-via-email","text":"To send a dashboard via email, perform the following steps: Navigate to the side menu and click the \u201cDashboards\u201d icon . Choose the necessary dashboard. Click in the upper-right corner of the window. The \u201cEmail\u201d popup will appear. The \u201cName\u201d and \u201cText\u201d fields are filled by default, still you can change them. Fill in the \u201cRecipients\u201d field (unlimited number of emails per time). Press the \u201cSend\u201d button. A popup message \u201cEmail was successfully sent\u201d will appear in the lower-right corner of the window.","title":"Send dashboard via email"},{"location":"guide/dashboards/#search-for-dashboard","text":"To search for a dashboard, perform the following steps: Navigate to the side menu and click the \u201cDashboards\u201d icon . Go to the \u201cSearch\u201d field and enter the name/part of the name of a dashboard. Choose the necessary dashboard.","title":"Search for dashboard"},{"location":"guide/dashboards/#change-the-order-of-dashboards","text":"To change the order of dashboards, perform the following steps: Navigate to the side menu and click the \u201cDashboards\u201d icon . Grab a dashboard with a hand cursor by clicking . Drag and drop the chosen dashboard to the necessary place. Dashboards will be displayed in a new order.","title":"Change the order of dashboards"},{"location":"guide/integrations/","text":"Integrations[Draft] \u00b6 Access Management: \u00b6 TBD CI / Automation Server: \u00b6 CI(continuous integration) server for run maven, gradle job. If you want another CI tools, please ask asistance There is possibility to add integration for more than one Jenkins: * Click \"+ New Integration\" button and add Jenkins. * Populate valid values for each field * NAME - Enter name of your Jenkins * URL - Enter url of your runing jenkins e.g. http://xx.xxx.xxx.xxx:80/jenkins * USER - Enter user name for your jenkins * API_TOKEN_OR_PASSWORD - Enter value of api token or password for jenkins * FOLDER - Name of your organization * JOB_URL_VISIBILITY: TRUE - If you want to have jenkins url for test run in reporting ; FALSE - If you don't need url for test run in reporting Example of Test run with JOB_URL_VISIBILITY: TRUE: ![Integration](https://github.com/zebrunner/documentation/blob/master/docs/assets/images/job_url_visibility.png?raw=true) Save changes Notification Service \u00b6 Test Case Management \u00b6 Test Environment Provider: \u00b6 The main perpouse of Test Environment Provider to execute tests on different selenium/appium hubs using Test Launcher feature. Image will be added What you need to use it?: * Get URL and credentials from your hub provider,activate and save appropriate provider settings. Image will be added","title":"Integrations"},{"location":"guide/integrations/#integrationsdraft","text":"","title":"Integrations[Draft]"},{"location":"guide/integrations/#access-management","text":"TBD","title":"Access Management:"},{"location":"guide/integrations/#ci-automation-server","text":"CI(continuous integration) server for run maven, gradle job. If you want another CI tools, please ask asistance There is possibility to add integration for more than one Jenkins: * Click \"+ New Integration\" button and add Jenkins. * Populate valid values for each field * NAME - Enter name of your Jenkins * URL - Enter url of your runing jenkins e.g. http://xx.xxx.xxx.xxx:80/jenkins * USER - Enter user name for your jenkins * API_TOKEN_OR_PASSWORD - Enter value of api token or password for jenkins * FOLDER - Name of your organization * JOB_URL_VISIBILITY: TRUE - If you want to have jenkins url for test run in reporting ; FALSE - If you don't need url for test run in reporting Example of Test run with JOB_URL_VISIBILITY: TRUE: ![Integration](https://github.com/zebrunner/documentation/blob/master/docs/assets/images/job_url_visibility.png?raw=true) Save changes","title":"CI / Automation Server:"},{"location":"guide/integrations/#notification-service","text":"","title":"Notification Service"},{"location":"guide/integrations/#test-case-management","text":"","title":"Test Case Management"},{"location":"guide/integrations/#test-environment-provider","text":"The main perpouse of Test Environment Provider to execute tests on different selenium/appium hubs using Test Launcher feature. Image will be added What you need to use it?: * Get URL and credentials from your hub provider,activate and save appropriate provider settings. Image will be added","title":"Test Environment Provider:"},{"location":"guide/projects/","text":"Projects \u00b6 Use the \u201cProjects\u201d tab ( icon on the side menu) to switch between the projects you work on. Once you\u2019ve selected the necessary project, you are able to launch separate test runs for it. All the data in Dashboards and Widgets will be displayed accordingly. Note: The UNKNOWN project is the default one. You cannot delete it. Create project \u00b6 To create a new project, perform the following steps: Navigate to the side menu and click the icon of your company at the top of the menu. Then press the \u201c+Add project\" button. The \u201cNew Project\u201d popup will appear. Enter a name and description of a new project. Click \"Create\" . The new project will appear in the list of projects. Delete project \u00b6 To delete a project, perform the following steps: Navigate to the side menu and click the icon of your company at the top of the menu. Hover the mouse cursor over the necessary project. Click beside the project name. The \u201cDelete Project\u201d popup will appear with a message \u201cThis action cannot be undone. This will permanently delete the project [name of the project]. Select another project to reassign all the existing items\u201d. Choose the project to reassign existing items. Type the name of the project to confirm the action. Press \u201cDelete\u201d. The project will be removed. Change company logo \u00b6 To change your company logo (this icon opens the \u201cProjects\u201d tab), perform the following steps: Navigate to the side menu and click the icon of your company at the top of the menu. Click \u201c+Upload new logo\u201d at the bottom of the menu. Upload or drop a file from your computer and click \u201cUpload\u201d. The logo will be updated.","title":"Projects"},{"location":"guide/projects/#projects","text":"Use the \u201cProjects\u201d tab ( icon on the side menu) to switch between the projects you work on. Once you\u2019ve selected the necessary project, you are able to launch separate test runs for it. All the data in Dashboards and Widgets will be displayed accordingly. Note: The UNKNOWN project is the default one. You cannot delete it.","title":"Projects"},{"location":"guide/projects/#create-project","text":"To create a new project, perform the following steps: Navigate to the side menu and click the icon of your company at the top of the menu. Then press the \u201c+Add project\" button. The \u201cNew Project\u201d popup will appear. Enter a name and description of a new project. Click \"Create\" . The new project will appear in the list of projects.","title":"Create project"},{"location":"guide/projects/#delete-project","text":"To delete a project, perform the following steps: Navigate to the side menu and click the icon of your company at the top of the menu. Hover the mouse cursor over the necessary project. Click beside the project name. The \u201cDelete Project\u201d popup will appear with a message \u201cThis action cannot be undone. This will permanently delete the project [name of the project]. Select another project to reassign all the existing items\u201d. Choose the project to reassign existing items. Type the name of the project to confirm the action. Press \u201cDelete\u201d. The project will be removed.","title":"Delete project"},{"location":"guide/projects/#change-company-logo","text":"To change your company logo (this icon opens the \u201cProjects\u201d tab), perform the following steps: Navigate to the side menu and click the icon of your company at the top of the menu. Click \u201c+Upload new logo\u201d at the bottom of the menu. Upload or drop a file from your computer and click \u201cUpload\u201d. The logo will be updated.","title":"Change company logo"},{"location":"guide/test_runs/","text":"Test runs \u00b6 On the very first login to Zebrunner, you will be asked to select one of the two screen modes: Integration via agent (Tests) or Selenium Hub (Sessions). This view will be displayed by default when you open the Test runs/Test sessions page. If you skip this step, Integration via agent (Test runs view) will be enabled by default. You can easily switch between the 2 modes by using the control on the Test runs/Test sessions page. The Test runs page allows you to launch tests from your GitHub repository, see detailed test results in real time and on a test run finish. To access the Test runs page, go to the side menu and click \"Test runs/Test sessions\" ( icon on the side menu). If the Test runs mode is not set by default, click on the \u201cTests/Sessions\u201d switch in the upper-right corner of the window. All the actions with test runs are performed on this page. Test launches \u00b6 To start running tests, you need to add your GitHub repository. Or get a sample test automation project to your GitHub account while creating your company in Zebrunner (read more in Getting Started ). Add repository \u00b6 To add a new repository, perform the following steps: On the Test runs page, click the \u201cTest launcher\u201d button. The Launcher wizard will be opened. Click the \u201c+Add repo\u201d button. Provide valid credentials for your GitHub account (select the organization of your user and the repository that contains automation tests). Press \u201cAdd\u201d. Select the automation server and the branch. Press \u201cScan\u201d. The scanner will pick up all the test XML files and create a launcher template for every XML. This action may take a couple of minutes. When you see the \u201cDone\u201d message, click \u201cBack to list\u201d. Multiple launchers will be created for API, web, and mobile tests. Remove repository \u00b6 To remove a repository, perform the following steps: On the Test runs page, click the \u201cTest launcher\u201d button. The Launcher wizard will be opened. Click beside the repository name. Press \u201cDelete repo\u201d at the bottom of the wizard. The repository will be removed from the list. Create launcher manually \u00b6 To create a test launcher manually, perform the following steps: On the Test runs page, click the \u201cTest launcher\u201d button. The Launcher wizard will be opened. Click beside the repository name. Create a new template specifying the template name, choosing the platform and the template, adding or removing arguments. Press \u201cAdd\u201d. The new launcher template will be added with a tag \u201cManual creation\u201d Launch test run \u00b6 To launch a test run, perform the following steps: On the Test runs page, click the \u201cTest launcher\u201d button. The Launcher wizard will be opened. Choose the necessary test launcher from the list. Select the test automation server (you will see this option the first time you open a recently created repository). Select the type of a test run, browser name and its version. The section below is dedicated to parameterization of your automation code. Select a branch, environment, thread count, emails and other parameters. Add additional parameters by clicking the \u201cEdit\u201d button at the top of the wizard. Press \u201cLaunch\u201d. The test run will be displayed in the state of compilation. After it switches to \u201cIn-progress\u201d (marked blue), you can track the automation results in real time. Abort test run \u00b6 To abort a test run \u201cIn-progress\u201d (marked blue), perform the following steps: On the Test runs page, go to the Test run settings . Press \u201cAbort\u201d. The test run will become aborted (marked grey). Remove launcher \u00b6 To remove a launcher, perform the following steps: On the Test runs page, click the \u201cTest launcher\u201d button. The Launcher wizard will be opened. Select the launcher you would like to remove. Click the \u201cEdit\u201d button at the top of the wizard. Press \u201cDelete\u201d. The launcher will be removed from the list. Test run results \u00b6 On the Test runs page, you can see all the test runs that have been executed recently. Moreover, view test run details, logs and video recordings, share test results with your colleagues. On the Test runs page, for every test run you can see: Test suite name and type. Environment. Platform/browser. The number of passed, skipped, failed, etc. tests. Execution time and start day. Settings (the 3-dot button). Filter test runs \u00b6 At the top of the Test runs page, you can filter results by different criteria: Name. Reviewed/not reviewed. Test status (passed, failed, skipped, aborted, in_progress, queued, unknown). Environment. Platform name. Browser name. Start date. Add stored filter \u00b6 You can create a custom filter that will be used on a daily basis by you and your teammates. For this, click \u201c+Add stored filter\u201d in the upper-left corner of the page. Tap the name, choose necessary parameters from the list, press \u201cAdd\u201d. You can create up to 30 new parameter sets at once. After you are done, press \u201cCreate\u201d. Edit/delete stored filter \u00b6 You can edit a created stored filter by clicking the pencil icon beside its name. Make the necessary changes and press \"Save\u201d. To delete a stored filter, click beside its name and press \"Delete\". View test run results \u00b6 To analyze test run results, click any item in the list. Or go to the Test run settings and click \u201cOpen\u201d (the Test results page will be opened in a new window). Passed tests are marked green, and failed ones are red. For every test, you can see the following details: Execution time Test owner Tags Reference to a Jira ticket Stack trace is provided for failed tests. Filter/group tests \u00b6 You can filter test results by statuses (passed, failed, skipped, aborted, in_progress) by clicking on coloured dots in the upper-right area of the page. Or group tests by different criteria in the upper-left area of the page: Class name Package name Tags View all tests by returning to the \u201cPlain\u201d category. Mark test as passed/failed \u00b6 To mark a test as passed/failed, on the Test results page, click Test settings and press \u201cMark test as passed/failed\u201d. Link known issue to test \u00b6 This option is only available for failed tests. On the Test results page, click Test settings and press \u201cLink issue\u201d. The red label will appear, the same one will be displayed in test statistics. After you link a known issue from Jira to a failed test, next time you get the same stack trace, the test run will be automatically identified and displayed with the same label. Analyze test flow \u00b6 To analyze the test flow and see additional information about test results, click on any test on the Test results page. In the test logs area, all the test steps are tracked. Turn on the video to view the test flow with comments of what is going on right now in the text script. You can maximize the video to get a better view. Under the video player, get the idea of test platform/browser, actual test status, its date and duration. Share test run results \u00b6 Copy link \u00b6 To copy the link to test run results, perform the following steps. On the Test runs page, go to the Test run settings on the left. Press \u201cCopy link\u201d. Send as email \u00b6 To send test results via email, perform the following steps: On the Test runs page, go to the Test run settings on the left. Press \u201cSend as email\u201d. The \u201cEmail\u201d popup will appear. Fill in the \u201cRecipients\u201d field (unlimited number of emails per time). Press \u201cSend\u201d . A popup message \u201cEmail was successfully sent\u201d will appear in the lower-right corner of the window. Export to HTML \u00b6 You can export test results to an HTML file and send it to your colleagues. For this, perform the following steps: On the Test runs page, go to the Test run settings on the left. Press \u201cExport to HTML\u201d. Save the document on your computer. Mark test run as reviewed \u00b6 To mark a test run as reviewed, perform the following steps: On the Test runs page, go to the Test run settings on the left. Press \u201cMark as reviewed\u201d. The \u201cComments\u201d popup will appear. Provide a comment if necessary. Press \u201cMark as reviewed\u201d. A mark will appear beside the test run name, together with if any comment was provided. Rerun/build test \u00b6 To rerun tests with the same parameters, perform the following steps: On the Test runs page, go to the Test run settings on the left. Press \u201cRerun\u201d. The \u201cRebuild testrun\u201d popup will appear. Choose what tests you want to rerun: Only failures or All tests. Press \u201cRerun\u201d. To run tests with additional parameters, perform the following steps: On the Test runs page, go to the Test run settings on the left. Press \u201cBuild now\u201d. The \u201cBuild now\u201d popup will appear. Change the proposed parameters. Press \u201cBuild now\u201d. Delete test run \u00b6 To delete a test run, perform the following steps: On the Test runs page, go to the Test run settings on the left. Press \u201cDelete\u201d. Submit the action. The test run will be removed.","title":"Test runs"},{"location":"guide/test_runs/#test-runs","text":"On the very first login to Zebrunner, you will be asked to select one of the two screen modes: Integration via agent (Tests) or Selenium Hub (Sessions). This view will be displayed by default when you open the Test runs/Test sessions page. If you skip this step, Integration via agent (Test runs view) will be enabled by default. You can easily switch between the 2 modes by using the control on the Test runs/Test sessions page. The Test runs page allows you to launch tests from your GitHub repository, see detailed test results in real time and on a test run finish. To access the Test runs page, go to the side menu and click \"Test runs/Test sessions\" ( icon on the side menu). If the Test runs mode is not set by default, click on the \u201cTests/Sessions\u201d switch in the upper-right corner of the window. All the actions with test runs are performed on this page.","title":"Test runs"},{"location":"guide/test_runs/#test-launches","text":"To start running tests, you need to add your GitHub repository. Or get a sample test automation project to your GitHub account while creating your company in Zebrunner (read more in Getting Started ).","title":"Test launches"},{"location":"guide/test_runs/#add-repository","text":"To add a new repository, perform the following steps: On the Test runs page, click the \u201cTest launcher\u201d button. The Launcher wizard will be opened. Click the \u201c+Add repo\u201d button. Provide valid credentials for your GitHub account (select the organization of your user and the repository that contains automation tests). Press \u201cAdd\u201d. Select the automation server and the branch. Press \u201cScan\u201d. The scanner will pick up all the test XML files and create a launcher template for every XML. This action may take a couple of minutes. When you see the \u201cDone\u201d message, click \u201cBack to list\u201d. Multiple launchers will be created for API, web, and mobile tests.","title":"Add repository"},{"location":"guide/test_runs/#remove-repository","text":"To remove a repository, perform the following steps: On the Test runs page, click the \u201cTest launcher\u201d button. The Launcher wizard will be opened. Click beside the repository name. Press \u201cDelete repo\u201d at the bottom of the wizard. The repository will be removed from the list.","title":"Remove repository"},{"location":"guide/test_runs/#create-launcher-manually","text":"To create a test launcher manually, perform the following steps: On the Test runs page, click the \u201cTest launcher\u201d button. The Launcher wizard will be opened. Click beside the repository name. Create a new template specifying the template name, choosing the platform and the template, adding or removing arguments. Press \u201cAdd\u201d. The new launcher template will be added with a tag \u201cManual creation\u201d","title":"Create launcher manually"},{"location":"guide/test_runs/#launch-test-run","text":"To launch a test run, perform the following steps: On the Test runs page, click the \u201cTest launcher\u201d button. The Launcher wizard will be opened. Choose the necessary test launcher from the list. Select the test automation server (you will see this option the first time you open a recently created repository). Select the type of a test run, browser name and its version. The section below is dedicated to parameterization of your automation code. Select a branch, environment, thread count, emails and other parameters. Add additional parameters by clicking the \u201cEdit\u201d button at the top of the wizard. Press \u201cLaunch\u201d. The test run will be displayed in the state of compilation. After it switches to \u201cIn-progress\u201d (marked blue), you can track the automation results in real time.","title":"Launch test run"},{"location":"guide/test_runs/#abort-test-run","text":"To abort a test run \u201cIn-progress\u201d (marked blue), perform the following steps: On the Test runs page, go to the Test run settings . Press \u201cAbort\u201d. The test run will become aborted (marked grey).","title":"Abort test run"},{"location":"guide/test_runs/#remove-launcher","text":"To remove a launcher, perform the following steps: On the Test runs page, click the \u201cTest launcher\u201d button. The Launcher wizard will be opened. Select the launcher you would like to remove. Click the \u201cEdit\u201d button at the top of the wizard. Press \u201cDelete\u201d. The launcher will be removed from the list.","title":"Remove launcher"},{"location":"guide/test_runs/#test-run-results","text":"On the Test runs page, you can see all the test runs that have been executed recently. Moreover, view test run details, logs and video recordings, share test results with your colleagues. On the Test runs page, for every test run you can see: Test suite name and type. Environment. Platform/browser. The number of passed, skipped, failed, etc. tests. Execution time and start day. Settings (the 3-dot button).","title":"Test run results"},{"location":"guide/test_runs/#filter-test-runs","text":"At the top of the Test runs page, you can filter results by different criteria: Name. Reviewed/not reviewed. Test status (passed, failed, skipped, aborted, in_progress, queued, unknown). Environment. Platform name. Browser name. Start date.","title":"Filter test runs"},{"location":"guide/test_runs/#add-stored-filter","text":"You can create a custom filter that will be used on a daily basis by you and your teammates. For this, click \u201c+Add stored filter\u201d in the upper-left corner of the page. Tap the name, choose necessary parameters from the list, press \u201cAdd\u201d. You can create up to 30 new parameter sets at once. After you are done, press \u201cCreate\u201d.","title":"Add stored filter"},{"location":"guide/test_runs/#editdelete-stored-filter","text":"You can edit a created stored filter by clicking the pencil icon beside its name. Make the necessary changes and press \"Save\u201d. To delete a stored filter, click beside its name and press \"Delete\".","title":"Edit/delete stored filter"},{"location":"guide/test_runs/#view-test-run-results","text":"To analyze test run results, click any item in the list. Or go to the Test run settings and click \u201cOpen\u201d (the Test results page will be opened in a new window). Passed tests are marked green, and failed ones are red. For every test, you can see the following details: Execution time Test owner Tags Reference to a Jira ticket Stack trace is provided for failed tests.","title":"View test run results"},{"location":"guide/test_runs/#filtergroup-tests","text":"You can filter test results by statuses (passed, failed, skipped, aborted, in_progress) by clicking on coloured dots in the upper-right area of the page. Or group tests by different criteria in the upper-left area of the page: Class name Package name Tags View all tests by returning to the \u201cPlain\u201d category.","title":"Filter/group tests"},{"location":"guide/test_runs/#mark-test-as-passedfailed","text":"To mark a test as passed/failed, on the Test results page, click Test settings and press \u201cMark test as passed/failed\u201d.","title":"Mark test as passed/failed"},{"location":"guide/test_runs/#link-known-issue-to-test","text":"This option is only available for failed tests. On the Test results page, click Test settings and press \u201cLink issue\u201d. The red label will appear, the same one will be displayed in test statistics. After you link a known issue from Jira to a failed test, next time you get the same stack trace, the test run will be automatically identified and displayed with the same label.","title":"Link known issue to test"},{"location":"guide/test_runs/#analyze-test-flow","text":"To analyze the test flow and see additional information about test results, click on any test on the Test results page. In the test logs area, all the test steps are tracked. Turn on the video to view the test flow with comments of what is going on right now in the text script. You can maximize the video to get a better view. Under the video player, get the idea of test platform/browser, actual test status, its date and duration.","title":"Analyze test flow"},{"location":"guide/test_runs/#share-test-run-results","text":"","title":"Share test run results"},{"location":"guide/test_runs/#copy-link","text":"To copy the link to test run results, perform the following steps. On the Test runs page, go to the Test run settings on the left. Press \u201cCopy link\u201d.","title":"Copy link"},{"location":"guide/test_runs/#send-as-email","text":"To send test results via email, perform the following steps: On the Test runs page, go to the Test run settings on the left. Press \u201cSend as email\u201d. The \u201cEmail\u201d popup will appear. Fill in the \u201cRecipients\u201d field (unlimited number of emails per time). Press \u201cSend\u201d . A popup message \u201cEmail was successfully sent\u201d will appear in the lower-right corner of the window.","title":"Send as email"},{"location":"guide/test_runs/#export-to-html","text":"You can export test results to an HTML file and send it to your colleagues. For this, perform the following steps: On the Test runs page, go to the Test run settings on the left. Press \u201cExport to HTML\u201d. Save the document on your computer.","title":"Export to HTML"},{"location":"guide/test_runs/#mark-test-run-as-reviewed","text":"To mark a test run as reviewed, perform the following steps: On the Test runs page, go to the Test run settings on the left. Press \u201cMark as reviewed\u201d. The \u201cComments\u201d popup will appear. Provide a comment if necessary. Press \u201cMark as reviewed\u201d. A mark will appear beside the test run name, together with if any comment was provided.","title":"Mark test run as reviewed"},{"location":"guide/test_runs/#rerunbuild-test","text":"To rerun tests with the same parameters, perform the following steps: On the Test runs page, go to the Test run settings on the left. Press \u201cRerun\u201d. The \u201cRebuild testrun\u201d popup will appear. Choose what tests you want to rerun: Only failures or All tests. Press \u201cRerun\u201d. To run tests with additional parameters, perform the following steps: On the Test runs page, go to the Test run settings on the left. Press \u201cBuild now\u201d. The \u201cBuild now\u201d popup will appear. Change the proposed parameters. Press \u201cBuild now\u201d.","title":"Rerun/build test"},{"location":"guide/test_runs/#delete-test-run","text":"To delete a test run, perform the following steps: On the Test runs page, go to the Test run settings on the left. Press \u201cDelete\u201d. Submit the action. The test run will be removed.","title":"Delete test run"},{"location":"guide/test_sessions/","text":"Test sessions \u00b6 On the very first login to Zebrunner, you will be asked to select one of the two screen modes: Integration via agent (Tests) or Selenium Hub (Sessions). This view will be displayed by default when you open the Test runs/Test sessions page. If you skip this step, Integration via agent (Tests) will be enabled by default. You can switch between the 2 modes by using the control on the Test runs/Test sessions page. The Test sessions page allows you to view the list of test sessions executed recently and see detailed information about the testing process. To access the Test sessions page, go to the side menu and click \"Test runs/Test sessions\" ( icon on the side menu). If the Test sessions mode is not set by default, click on the \u201cTests/Sessions\u201d switch in the upper-right corner of the window. All the actions with test sessions are performed on this page. View test session info \u00b6 On the Test sessions page, for every item you can see: Test and build name Test session status Environment Execution time Start date After you click a test session item, the Test session results page will be opened. See the test logs captured from Selenium or Appium server in the area to the left, watch how the test session was executed in the video recording to the right, find the status of your test and other information (start date, duration, platform) in the area below. Generate access key \u00b6 To generate an access key, perform the following steps: On the Test sessions page , click the \u201cAccess key\u201d button in the top-right corner of the page. The Access key popup will appear. At the top of the popup, in the \"Access URL\" field, generate a new access token clicking and copy it by clicking . In the area below, generate the capabilities required to run tests in your language (switch between Java, C#, Go, Ruby, Python, PHP, Webdriver.io). Select the platform (Android/Web), application, browser name and version, video resolution. All the changes will be immediately applied in the code area below. Specify the test name and build name, if needed, in the field called \u201cname\u201d , separate them with a # sign. Click \u201cCopy\u201d. The capabilities will be copied into your clipboard, now you can place them in your favorite id and run your tests in our environment.","title":"Test sessions"},{"location":"guide/test_sessions/#test-sessions","text":"On the very first login to Zebrunner, you will be asked to select one of the two screen modes: Integration via agent (Tests) or Selenium Hub (Sessions). This view will be displayed by default when you open the Test runs/Test sessions page. If you skip this step, Integration via agent (Tests) will be enabled by default. You can switch between the 2 modes by using the control on the Test runs/Test sessions page. The Test sessions page allows you to view the list of test sessions executed recently and see detailed information about the testing process. To access the Test sessions page, go to the side menu and click \"Test runs/Test sessions\" ( icon on the side menu). If the Test sessions mode is not set by default, click on the \u201cTests/Sessions\u201d switch in the upper-right corner of the window. All the actions with test sessions are performed on this page.","title":"Test sessions"},{"location":"guide/test_sessions/#view-test-session-info","text":"On the Test sessions page, for every item you can see: Test and build name Test session status Environment Execution time Start date After you click a test session item, the Test session results page will be opened. See the test logs captured from Selenium or Appium server in the area to the left, watch how the test session was executed in the video recording to the right, find the status of your test and other information (start date, duration, platform) in the area below.","title":"View test session info"},{"location":"guide/test_sessions/#generate-access-key","text":"To generate an access key, perform the following steps: On the Test sessions page , click the \u201cAccess key\u201d button in the top-right corner of the page. The Access key popup will appear. At the top of the popup, in the \"Access URL\" field, generate a new access token clicking and copy it by clicking . In the area below, generate the capabilities required to run tests in your language (switch between Java, C#, Go, Ruby, Python, PHP, Webdriver.io). Select the platform (Android/Web), application, browser name and version, video resolution. All the changes will be immediately applied in the code area below. Specify the test name and build name, if needed, in the field called \u201cname\u201d , separate them with a # sign. Click \u201cCopy\u201d. The capabilities will be copied into your clipboard, now you can place them in your favorite id and run your tests in our environment.","title":"Generate access key"},{"location":"guide/user_management/","text":"User management \u00b6 There are 2 roles in the application: Admin and User . Each of them has a set of predefined permissions. By default, Admins have the following permissions: Dashboards: Modify dashboards, Modify widgets Test runs: Modify test runs, Test runs CI, Modify tests Users: View users Projects: Modify projects Invitations: Invite Users, Modify invitations Launchers: Modify launchers, View launchers Billing: Payment methods, Invoices. Users have the following permissions: Test runs: Modify test runs, Test runs CI, Modify tests Projects: Modify projects Launchers: Modify launchers, View launchers Users \u00b6 Users page shows all the users registered in the company. To access the Users page, navigate to the side menu and click the \u201cUser management\u201d icon , then press \u201cUsers\u201d. Note: You need the \u201cView users\u201d permission to see this page! On the Users page, for every user you can see: ID Username Email First/Last name Status (active, inactive) Source (LDAP, internal) integration ldap must be turned on Registration date. Go to the User settings and press \u201cPerformance\u201d . You will be redirected to a personal dashboard displaying the performance of a chosen user. Invitations \u00b6 You can invite users to your company on the Invitations page. To access the Invitations page, navigate to the side menu and click the \u201cUser management\u201d icon , then press \u201cInvitations\u201d. Note: You need the \u201cInvite users\u201d permission to see this page! On the Invitations page, you can see the list of all invitations sent in your company. Use the Search field at the top of the page to find the necessary invitation. Send invitation \u00b6 To send an invitation to a user, perform the following steps: On the Users or Invitations page, press \u201c+Invite user\" in the upper-right corner of the window. The \u201cInvite users\u201d popup will appear. Choose a group to add user(s): Admins or Users. Enter the email(s). You can enter an unlimited number of emails at a time. Press \u201cInvite\u201d. Invitations will be sent to the specified emails. Users need to accept the invitation, after that you will see the ACCEPTED status in front of the user name. Otherwise, the PENDING status will be displayed. Manage invitations \u00b6 Invitation status ACCEPTED : If you click and select \u201cProfile\u201d , you will be redirected to the Users page. Invitation status PENDING : By clicking , you can: Copy the link and share it with the user Resend the invitation Revoke the invitation - the invited user will not be able to use this link anymore.","title":"User management"},{"location":"guide/user_management/#user-management","text":"There are 2 roles in the application: Admin and User . Each of them has a set of predefined permissions. By default, Admins have the following permissions: Dashboards: Modify dashboards, Modify widgets Test runs: Modify test runs, Test runs CI, Modify tests Users: View users Projects: Modify projects Invitations: Invite Users, Modify invitations Launchers: Modify launchers, View launchers Billing: Payment methods, Invoices. Users have the following permissions: Test runs: Modify test runs, Test runs CI, Modify tests Projects: Modify projects Launchers: Modify launchers, View launchers","title":"User management"},{"location":"guide/user_management/#users","text":"Users page shows all the users registered in the company. To access the Users page, navigate to the side menu and click the \u201cUser management\u201d icon , then press \u201cUsers\u201d. Note: You need the \u201cView users\u201d permission to see this page! On the Users page, for every user you can see: ID Username Email First/Last name Status (active, inactive) Source (LDAP, internal) integration ldap must be turned on Registration date. Go to the User settings and press \u201cPerformance\u201d . You will be redirected to a personal dashboard displaying the performance of a chosen user.","title":"Users"},{"location":"guide/user_management/#invitations","text":"You can invite users to your company on the Invitations page. To access the Invitations page, navigate to the side menu and click the \u201cUser management\u201d icon , then press \u201cInvitations\u201d. Note: You need the \u201cInvite users\u201d permission to see this page! On the Invitations page, you can see the list of all invitations sent in your company. Use the Search field at the top of the page to find the necessary invitation.","title":"Invitations"},{"location":"guide/user_management/#send-invitation","text":"To send an invitation to a user, perform the following steps: On the Users or Invitations page, press \u201c+Invite user\" in the upper-right corner of the window. The \u201cInvite users\u201d popup will appear. Choose a group to add user(s): Admins or Users. Enter the email(s). You can enter an unlimited number of emails at a time. Press \u201cInvite\u201d. Invitations will be sent to the specified emails. Users need to accept the invitation, after that you will see the ACCEPTED status in front of the user name. Otherwise, the PENDING status will be displayed.","title":"Send invitation"},{"location":"guide/user_management/#manage-invitations","text":"Invitation status ACCEPTED : If you click and select \u201cProfile\u201d , you will be redirected to the Users page. Invitation status PENDING : By clicking , you can: Copy the link and share it with the user Resend the invitation Revoke the invitation - the invited user will not be able to use this link anymore.","title":"Manage invitations"},{"location":"guide/user_profile/","text":"User profile \u00b6 Edit personal information \u00b6 To navigate to the User Profile page, go to the side menu and click Profile icon in the lower-left corner of the window. Choose the \u201cAccount & Profile\u201d section. The User Account & Profile page contains several elements. Profile photo and information \u00b6 This area shows your profile photo, first and last name (is edited in Personal data area), your role in the application. To change your profile photo, click the profile icon at the top of the page, upload or drop a file from your computer and click \u201cUpload\u201d. Access Token \u00b6 In the Access token area, generate an Access token (click ), copy it together with the Service URL (click ) to get integrated with Zebrunner (for more information, visit \"Test sessions\" ). Personal data \u00b6 In this area, you can see your personal information: Username, Email, First and Last Name. Both Username and Email are set when creating a profile, you cannot change them. First Name and Last Name are editable. After you make the necessary changes, click \u201cSave\u201d . Preferences \u00b6 Here you can choose the default tests view - Test runs or Test sessions. After you set the preference, click \u201cSave\u201d. Change password \u00b6 To change a password, enter your current password, then enter a new one. A password must contain from 5 to 50 characters which can be letters, numbers, special characters. Logout \u00b6 To log out, go to the side menu and click the profile icon in the lower-left corner of the window. Click the \u201cLog out\u201d button at the bottom of the menu. Or, on the \u201cAccount & Profile\u201d page, press \u201cLog out\u201d in the upper-right corner of the window.","title":"User profile"},{"location":"guide/user_profile/#user-profile","text":"","title":"User profile"},{"location":"guide/user_profile/#edit-personal-information","text":"To navigate to the User Profile page, go to the side menu and click Profile icon in the lower-left corner of the window. Choose the \u201cAccount & Profile\u201d section. The User Account & Profile page contains several elements.","title":"Edit personal information"},{"location":"guide/user_profile/#profile-photo-and-information","text":"This area shows your profile photo, first and last name (is edited in Personal data area), your role in the application. To change your profile photo, click the profile icon at the top of the page, upload or drop a file from your computer and click \u201cUpload\u201d.","title":"Profile photo and information"},{"location":"guide/user_profile/#access-token","text":"In the Access token area, generate an Access token (click ), copy it together with the Service URL (click ) to get integrated with Zebrunner (for more information, visit \"Test sessions\" ).","title":"Access Token"},{"location":"guide/user_profile/#personal-data","text":"In this area, you can see your personal information: Username, Email, First and Last Name. Both Username and Email are set when creating a profile, you cannot change them. First Name and Last Name are editable. After you make the necessary changes, click \u201cSave\u201d .","title":"Personal data"},{"location":"guide/user_profile/#preferences","text":"Here you can choose the default tests view - Test runs or Test sessions. After you set the preference, click \u201cSave\u201d.","title":"Preferences"},{"location":"guide/user_profile/#change-password","text":"To change a password, enter your current password, then enter a new one. A password must contain from 5 to 50 characters which can be letters, numbers, special characters.","title":"Change password"},{"location":"guide/user_profile/#logout","text":"To log out, go to the side menu and click the profile icon in the lower-left corner of the window. Click the \u201cLog out\u201d button at the bottom of the menu. Or, on the \u201cAccount & Profile\u201d page, press \u201cLog out\u201d in the upper-right corner of the window.","title":"Logout"},{"location":"guide/widgets/","text":"Widgets \u00b6 Widgets are graphical control elements that analyse your automation test results, provide detailed test execution statistics and other important data. You can perform all actions with widgets listed below on the \"Dashboards\" page (on the side menu, click the \u201cDashboards\u201d icon ). Create widgets Edit widgets Delete widgets Change widget placement or resize widgets Send widgets via email Create widget \u00b6 To create a new widget, perform the following steps: Click the \"+ NEW WIDGET\" button in the top-right corner of the \u201cDashboards\u201d page. The Widget wizard will be opened. You have 2 options: choose a template for a widget or go to the \u201cChoose from existing widgets\u201d section with a set of predefined widgets. To simplify the process, fill in the search field with a name or part of a widget name. If you want to add an existing widget: Go to the \u201cChoose from existing widgets\u201d section. Select the widget you need and see its preview. Press \"Add\" . Note: When you add an existing widget to a dashboard, it will be marked with the word \"Added\" and a checkmark. If you want to choose a template for a widget: In the \"Choose template\" section, select the widget you need and see its preview. Press \u201cNext\u201d . Set the necessary parameters. There are two types of them: basic and advanced ones. To see advanced parameters, click \u201cShow more\u201d . Press \u201cNext\u201d and enter a name and description of the future widget. Press \u201cAdd\u201d . The created widget will be automatically added to a dashboard. Edit widget \u00b6 To edit a widget, perform the following steps: Click the Widget settings in the upper-right corner of a widget. Press \u201cEdit widget\u201d. The Widget wizard will be opened. Apply the necessary changes in widget settings. Click \u201cSave\u201d . The widget will be displayed with updates. Remove widget from dashboard \u00b6 To remove a widget from a dashboard, perform the following steps: Click the Widget settings in the upper-right corner of a widget. Press \u201cRemove from dashboard\u201d. A widget will be removed from a dashboard, but the information will not be lost. You can create a widget with the same settings later, actual data will be displayed. Send widget by email \u00b6 To send a widget by email, perform the following steps: Click the Widget settings in the upper-right corner of a widget. Press \u201cSend by email\u201d. The \u201cEmail\u201d popup will appear. The \u201cName\u201d and \u201cText\u201d fields will be filled by default, still you can edit them. Fill in the \u201cRecipients\u201d field (unlimited number of emails per time). Press \u201cSend\u201d . A pop-up message \u201cEmail was successfully sent\u201d will appear in the lower-right corner of the window. Change widget placement \u00b6 To change a widget placement within a dashboard area, perform the following steps: Press the \u201cWidget placement\u201d button in the upper-right corner of the window. Drag and drop a widget to the selected position. When you move the widget to the area with enough space, the system marks this place with a dotted line. Press \u201cApply\u201d . Resize widget \u00b6 Every widget has a basic size. To resize a widget, perform the following steps: Press the \u201cWidget placement\u201d button in the upper-right corner of the window. Hover the mouse cursor over the widget. The system will show resizing arrows. Grab the arrow with the cursor and drag it to the desired width and height. Press \u201cApply\u201d .","title":"Widgets"},{"location":"guide/widgets/#widgets","text":"Widgets are graphical control elements that analyse your automation test results, provide detailed test execution statistics and other important data. You can perform all actions with widgets listed below on the \"Dashboards\" page (on the side menu, click the \u201cDashboards\u201d icon ). Create widgets Edit widgets Delete widgets Change widget placement or resize widgets Send widgets via email","title":"Widgets"},{"location":"guide/widgets/#create-widget","text":"To create a new widget, perform the following steps: Click the \"+ NEW WIDGET\" button in the top-right corner of the \u201cDashboards\u201d page. The Widget wizard will be opened. You have 2 options: choose a template for a widget or go to the \u201cChoose from existing widgets\u201d section with a set of predefined widgets. To simplify the process, fill in the search field with a name or part of a widget name. If you want to add an existing widget: Go to the \u201cChoose from existing widgets\u201d section. Select the widget you need and see its preview. Press \"Add\" . Note: When you add an existing widget to a dashboard, it will be marked with the word \"Added\" and a checkmark. If you want to choose a template for a widget: In the \"Choose template\" section, select the widget you need and see its preview. Press \u201cNext\u201d . Set the necessary parameters. There are two types of them: basic and advanced ones. To see advanced parameters, click \u201cShow more\u201d . Press \u201cNext\u201d and enter a name and description of the future widget. Press \u201cAdd\u201d . The created widget will be automatically added to a dashboard.","title":"Create widget"},{"location":"guide/widgets/#edit-widget","text":"To edit a widget, perform the following steps: Click the Widget settings in the upper-right corner of a widget. Press \u201cEdit widget\u201d. The Widget wizard will be opened. Apply the necessary changes in widget settings. Click \u201cSave\u201d . The widget will be displayed with updates.","title":"Edit widget"},{"location":"guide/widgets/#remove-widget-from-dashboard","text":"To remove a widget from a dashboard, perform the following steps: Click the Widget settings in the upper-right corner of a widget. Press \u201cRemove from dashboard\u201d. A widget will be removed from a dashboard, but the information will not be lost. You can create a widget with the same settings later, actual data will be displayed.","title":"Remove widget from dashboard"},{"location":"guide/widgets/#send-widget-by-email","text":"To send a widget by email, perform the following steps: Click the Widget settings in the upper-right corner of a widget. Press \u201cSend by email\u201d. The \u201cEmail\u201d popup will appear. The \u201cName\u201d and \u201cText\u201d fields will be filled by default, still you can edit them. Fill in the \u201cRecipients\u201d field (unlimited number of emails per time). Press \u201cSend\u201d . A pop-up message \u201cEmail was successfully sent\u201d will appear in the lower-right corner of the window.","title":"Send widget by email"},{"location":"guide/widgets/#change-widget-placement","text":"To change a widget placement within a dashboard area, perform the following steps: Press the \u201cWidget placement\u201d button in the upper-right corner of the window. Drag and drop a widget to the selected position. When you move the widget to the area with enough space, the system marks this place with a dotted line. Press \u201cApply\u201d .","title":"Change widget placement"},{"location":"guide/widgets/#resize-widget","text":"Every widget has a basic size. To resize a widget, perform the following steps: Press the \u201cWidget placement\u201d button in the upper-right corner of the window. Hover the mouse cursor over the widget. The system will show resizing arrows. Grab the arrow with the cursor and drag it to the desired width and height. Press \u201cApply\u201d .","title":"Resize widget"}]}